NAME
    containers/map -- Finite maps that sucks less than Lua tables

SYNOPSIS
    local map = require("containers/map")

    -- Create an empty map.
    local m = map.new()

    -- Insert some values. nil is also a valid value.
    m:set("a", 1)
    m:set("b", nil)

    -- Iterate over each entry of the map.
    for key, val in m:entries() do
        print(key, val)
    end
    -- ..prints 'a 1' and 'b nil'

DESCRIPTION
    This module provides a finite map class with a quite rich set of
    methods to manipulate maps. Unlike Lua tables, a nil value is also
    a valid element of maps.

    On the other hand, nil keys are prohibited in this class too, and
    trying to use nil as a key will trigger an error.

CONSTRUCTORS
    map.new(): map
        Create an empty map.

    map.new(t: table): map
    map.new(iter: function, s: any, var: any): map
        Create a map by shallow-copying a table, or iterating through
        an iterator. The iterator is supposed to generate pairs of (k,
        v) where k is the key and v is the value.

METHODS
  BASIC METHODS

    m:get(key: any[, default: any]): any
        Get the value associated with the given key. The optional
        argument "default", if given, is used as the default value in
        case the map does not have the given key. An error is thrown
        if the default value is not supplied and the key does not
        exist.

    m:has(key: any): boolean
        Return true iff a given key exists in the map.

    m:set(key: any, value: any[, combine: (old: any, new: any, k: any)->any]): self
        Insert a value associated with the given key with overwriting
        an existing value if any.

        The optional argument "combine", if given, is called with the
        old value, new value, and the key when there is already a
        value in the map associated with the key. In that case the
        result of the combining function is used as the new value.

    m:delete(key: any): self
        Remove a value associated with the given key if any.

    m:size(): number
        Return the number of key/value pairs in the map.

    m:table(): table
        Return a shallow copy of the map as a table.

    m:clone(): map
        Return a shallow copy of a map.

    m:clear(): self
        Remove all the key/value pairs from a map.

    m:entries(): function, any, any
        Return an iterator which generates pairs of (k, v) where k is
        the key and v is the value.

  COMBINING MAPS

    m:union(xs: map[, combine: (l: any, r: any, k: any)->any]): map
        Return a shallow copy of the map with another map "xs" merged
        with it. This method is left-biased, i.e. it prefers "self"
        over "xs" when duplicate keys are encountered.

        The optional argument "combine", if given, is called with the
        left value, right value, and the key when there are keys that
        exist in both maps. In that case the result of the combining
        function is used as the new value.

    m:difference(xs: map): map
        Return a shallow copy of the map with removing any of the keys
        that also exist in another map "xs".

    m:intersection(xs: map[, combine: (l: any, r: any, k: any)->any]): map
        Return a shallow copy of the map with removing any of the keys
        that don't exist in another map "xs".

        The optional argument "combine", if given, is called with the
        left value, right value, and the key for each value to be
        retained. In that case the result of the combining function is
        used as the new value.

  MAP TRANSFORMATIONS

    m:map(f: (v: any, k: any)->any): map
        Map a function over all the key/value pairs in the map, and
        return a new map consisting of the resulting entries. The
        function f is called with 2 arguments: the value and its
        corresponding key.

    m:filter(p: (v: any, k: any)->boolean): map
        Apply a predicate function p to each value in the map, and
        return a new map with values that produce true.

    m:partition(p: (v: any, k: any)->boolean): map, map
        Apply a predicate function p to each value in the map, and
        return new maps with values that produce true and those don't.
